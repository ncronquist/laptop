fancy_echo() {
  printf "\n%b\n" "$1"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="$2"

  if [[ -w "$HOME/.zshrc.local" ]]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if (( skip_new_line )); then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}
### end common-components/shared-functions

#!/usr/bin/env bash
### end common-components/bash-shebang

# This file is auto-generated. Do not edit it by hand unless you know what
# you're doing. Please see 'CONTRIBUTING.md' for more information.
### end common-components/header

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e
### end common-components/exit-trap

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'
### end common-components/check-home-bin

if ! grep -qiE 'wheezy|jessie|precise|trusty|xenial' /etc/os-release; then
  fancy_echo "Sorry! we don't currently support that distro."
  exit 1
fi
### end linux-components/distro-check

fancy_echo "Installing git, for source control management ..."
  sudo apt-get install -y git

fancy_echo "Installing libraries for common gem dependencies ..."
  sudo apt-get install -y libxslt1-dev libcurl4-openssl-dev libksba8 libksba-dev libqtwebkit-dev libreadline-dev

fancy_echo "Installing Ruby dependencies ..."
  sudo apt-get install -y zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev

fancy_echo "Installing ctags, to index files for vim tab completion of methods, classes, variables ..."
  sudo apt-get install -y exuberant-ctags

fancy_echo "Installing vim ..."
  sudo apt-get install -y vim-gtk

fancy_echo "Installing tmux, to save project state and switch between projects ..."
  sudo apt-get install -y tmux

fancy_echo "Installing ImageMagick, to crop and resize images ..."
  sudo apt-get install -y imagemagick

fancy_echo "Installing watch, to execute a program periodically and show the output ..."
  sudo apt-get install -y watch

fancy_echo "Installing curl ..."
  sudo apt-get install -y curl

fancy_echo "Installing zsh ..."
  sudo apt-get install -y zsh
### end linux-components/debian-derivative-packages

fancy_echo "Changing your shell to zsh ..."
  chsh -s $(which zsh)
### end common-components/zsh

if [[ ! -d "$HOME/.nvm" ]]; then
  fancy_echo "Installing nvm, to change Node versions ..."
  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash
fi
### end common-components/nvm

node_version="4.4.3"

fancy_echo "Installing Node $node_version ..."
  source $HOME/.nvm/nvm.sh
  nvm install $node_version
  nvm use $node_version
  nvm alias default $node_version
### end common-components/node-environment

silver_searcher_from_source() {
  git clone git://github.com/ggreer/the_silver_searcher.git /tmp/the_silver_searcher
  sudo apt-get install -y automake pkg-config libpcre3-dev zlib1g-dev liblzma-dev
  sh /tmp/the_silver_searcher/build.sh
  cd /tmp/the_silver_searcher
  sh build.sh
  sudo make install
  cd
  rm -rf /tmp/the_silver_searcher
}

if ! command -v ag >/dev/null; then
  fancy_echo "Installing The Silver Searcher (better than ack or grep) to search the contents of files ..."

  if apt-cache search silversearcher-ag  | grep "silversearcher-ag " &>/dev/null; then
    sudo apt-get install silversearcher-ag
  else
    silver_searcher_from_source
  fi
fi
### end linux-components/silver-searcher

if [[ ! -d "$HOME/.rbenv" ]]; then
  fancy_echo "Installing rbenv, to change Ruby versions ..."
    git clone https://github.com/sstephenson/rbenv.git ~/.rbenv

    append_to_zshrc 'export PATH="$HOME/.rbenv/bin:$PATH"'
    append_to_zshrc 'eval "$(rbenv init - zsh --no-rehash)"' 1

    export PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init - zsh)"
fi

if [[ ! -d "$HOME/.rbenv/plugins/rbenv-gem-rehash" ]]; then
  fancy_echo "Installing rbenv-gem-rehash so the shell automatically picks up binaries after installing gems with binaries..."
    git clone https://github.com/sstephenson/rbenv-gem-rehash.git \
      ~/.rbenv/plugins/rbenv-gem-rehash
fi

if [[ ! -d "$HOME/.rbenv/plugins/ruby-build" ]]; then
  fancy_echo "Installing ruby-build, to install Rubies ..."
    git clone https://github.com/sstephenson/ruby-build.git \
      ~/.rbenv/plugins/ruby-build
fi
### end common-components/rbenv

ruby_version="2.3.0"
rails_environment="4.2.6"
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"
export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"

fancy_echo "Installing Ruby $ruby_version ..."
  rbenv install -s "$ruby_version"

fancy_echo "Setting $ruby_version as global default Ruby ..."
  rbenv global "$ruby_version"
  rbenv rehash

fancy_echo "Updating to latest Rubygems version ..."
  gem update --system

fancy_echo "Installing Bundler to install project-specific Ruby gems ..."
  gem install bundler --no-document --pre

fancy_echo "Installing Rails for Ruby web development ..."
  gem install rails -v $rails_environment
  rbenv rehash
### end common-components/ruby-environment

fancy_echo "Configuring Bundler for faster, parallel gem installation ..."
  number_of_cores=$(nproc)
  bundle config --global jobs $((number_of_cores - 1))
### end linux-components/bundler

# Examples: Not currently installing any gems
# fancy_echo "Installing Suspenders, thoughtbot's Rails template ..."
#  gem install suspenders --no-document

# fancy_echo "Installing Parity, shell commands for development, staging, and
# production parity ..."
#  gem install parity --no-document
### end common-components/default-gems

fancy_echo "Installing Heroku CLI client ..."
  curl -s https://toolbelt.heroku.com/install-ubuntu.sh | sh

fancy_echo "Installing the heroku-config plugin to pull config variables locally to be used as ENV variables ..."
  heroku plugins:install git://github.com/ddollar/heroku-config.git
### end linux-components/heroku

fancy_echo "Installing rcm, to manage your dotfiles ..."
  wget https://thoughtbot.github.io/rcm/debs/rcm_1.3.0-1_all.deb
  sha=$(sha256sum rcm_1.3.0-1_all.deb | cut -f1 -d' ')
  [ "$sha" = "2e95bbc23da4a0b995ec4757e0920197f4c92357214a65fedaf24274cda6806d" ] && \
  sudo dpkg -i rcm_1.3.0-1_all.deb
### end linux-components/rcm

if [[ ! -d "$HOME/.dvm" ]]; then
  fancy_echo "Installing dvm, to change Docker versions ..."
  curl -sL https://download.getcarina.com/dvm/latest/install.sh | sh

  append_to_zshrc '[[ -r $DVM_DIR/bash_completion ]] && . $DVM_DIR/bash_completion'
fi
### end common-components/dvm

docker_version="1.10.2"

fancy_echo "Installing Docker $docker_version ..."
  source $HOME/.dvm/dvm.sh
  dvm install $docker_version
  dvm use $docker_version
### end common-components/docker-environment

fancy_echo "Installing your personal additions from ~/.laptop.local ..."
  if [[ -f ~/.laptop.local ]]; then
    source ~/.laptop.local
  fi
### end common-components/personal-additions

if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
  fancy_echo "Installing oh-my-zsh ..."
  sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"
fi
### end common-components/oh-my-zsh

fancy_echo "Install complete! Restart your computer ..."
### end common-components/footer

